import Foundation
import UIKit

protocol {{ module_info.name }}FlowController {
    func start()
}
{% if custom_parameters.hasDelegate == "yes" and custom_parameters.delegate != "" %}
protocol {{ module_info.name }}FlowControllerDelegate: class {
    func dismiss(flowController: {{ module_info.name }}FlowControllerImplementation)
}
{% endif %}
final class {{ module_info.name }}FlowControllerImplementation: MainFlowController,
                                                            {{ module_info.name }}FlowController {
    {% if custom_parameters.windowRootVC == "yes" %}private weak var window: UIWindow?{% endif %}
    var mainFlowController: UIViewController {
        return navigationController
    }
    var childFlowController: [FlowController] = []
    {% if custom_parameters.hasDelegate == "yes" and custom_parameters.delegate != "" %}
    weak var delegate: {{ module_info.name }}FlowControllerDelegate?
    {% endif %}
    private lazy var navigationController: UINavigationController = {
        let nc = UINavigationController()
        nc.navigationBar.isTranslucent = false
        return nc
    }()
    {% if custom_parameters.windowRootVC == "yes" %}
    init(window: UIWindow?) {
        self.window = window
        window?.rootViewController = mainFlowController
        window?.makeKeyAndVisible()
    }
    {% endif %}
    func start() {
        let presenter = Mixin{{ module_info.name }}Presenter()
        {% if custom_parameters.hasDelegate == "yes" and custom_parameters.delegate != "" %}
        presenter.delegate = self
        {% endif %}
        let vc: {{ module_info.name }}ViewController = {{ module_info.name }}ViewController(presenter: presenter)
        navigationController.viewControllers = [vc]
    }

    init() {}
}

{% if custom_parameters.hasDelegate == "yes" and custom_parameters.delegate != "" %}
extension {{ module_info.name }}FlowControllerImplementation: {{ module_info.name }}PresenterDelegate {
    func dismiss(presenter: {{ module_info.name }}Presenter) {
        {% if custom_parameters.hasDelegate == "yes" and custom_parameters.delegate != "" %}delegate?.dismiss(flowController: self) {% endif %}
    }
}
{% endif %}
{% if custom_parameters.hasDelegate == "yes" and custom_parameters.delegate != "" %}
// Move to {{ custom_parameters.delegate }}FlowControllerImplementation file
extension {{ custom_parameters.delegate }}FlowControllerImplementation: {{ module_info.name }}FlowControllerDelegate {
    func dismiss(flowController: {{ module_info.name }}FlowControllerImplementation) {

    }
}

private extension {{ custom_parameters.delegate }}FlowControllerImplementation {
    func create{{ module_info.name }}FlowController() -> {{ module_info.name }}FlowControllerImplementation {
        let flowController: {{ module_info.name }}FlowControllerImplementation = {{ module_info.name }}FlowControllerImplementation()
        flowController.delegate = self
        add(childFlowController: flowController)
        flowController.start()
        return flowController
    }
}
{% endif %}
