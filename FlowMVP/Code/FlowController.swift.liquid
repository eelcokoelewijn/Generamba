import Foundation
import UIKit
protocol {{ module_info.name }}FlowController {
    func start()
}

protocol {{ module_info.name }}FlowControllerDelegate: class {

}

final class {{ module_info.name }}FlowControllerImplementation: MainFlowController,
                                                            {{ module_info.name }}FlowController {
    var mainFlowController: UIViewController {
        return navigationController
    }
    var childFlowController: [FlowController] = []

    private lazy var navigationController: UINavigationController = {
        let nc = UINavigationController()
        nc.navigationBar.isTranslucent = false
        return nc
    }()

    init() {}

    init(window: UIWindow?) {
        window?.rootViewController = mainFlowController
        window?.makeKeyAndVisible()
    }

    func start() {
        let presenter = Mixin{{ module_info.name }}Presenter()
        presenter.delegate = self
        navigationController.viewControllers = [{{ module_info.name }}ViewController(presenter: presenter)]
    }
}

extension {{ module_info.name }}FlowControllerImplementation: {{ module_info.name }}PresenterDelegate {
  func dismiss(presenter: {{ module_info.name }}Presenter) {
      // delegate?.dismiss(flowController: self)
  }
}

extension {{ module_info.name }}FlowControllerImplementation: {{ module_info.name }}FlowControllerDelegate {
}
