import Foundation

protocol {{ module_info.name }}PresenterDelegate: class {
    func dismiss(presenter: {{ module_info.name }}Presenter)
}

protocol {{ module_info.name }}Output: class {
    func setLabel(text: String)
    func configure(title: String)
}

protocol {{ module_info.name }}Presenter {
    func start()
    func setOutput(_ output: {{ module_info.name }}Output)
    func closeTapped()
}

protocol Uses{{ module_info.name }}Presenter {
    var {{ module_info.name | downcase }}Presenter: {{ module_info.name }}Presenter { get }
}

class Mixin{{ module_info.name }}Presenter: {{ module_info.name }}Presenter {
    weak var output: {{ module_info.name }}Output?
    weak var delegate: {{ module_info.name }}PresenterDelegate?

    func start() {
        output?.configure(title: "{{ module_info.name }}")
        output?.setLabel(text: "{{ module_info.name }} view")
    }

    func setOutput(_ output: {{ module_info.name }}Output) {
        self.output = output
    }

    func closeTapped() {
      delegate?.dismiss(presenter: self)
    }
}
