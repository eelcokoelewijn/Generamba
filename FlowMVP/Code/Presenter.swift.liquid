import Foundation

{% if custom_parameters.hasDelegate == "yes" and custom_parameters.delegate != "" %}
protocol {{ module_info.name }}PresenterDelegate: class {
    func dismiss(presenter: {{ module_info.name }}Presenter)
}
{% endif %}

protocol {{ module_info.name }}Output: class {
    func setLabel(text: String)
    func configure(title: String)
}

protocol {{ module_info.name }}Presenter {
    func start()
    func setOutput(_ output: {{ module_info.name }}Output)
    {% if custom_parameters.hasDelegate == "yes" and custom_parameters.delegate != "" %}
    func closeTapped()
    {% endif %}
}

protocol Uses{{ module_info.name }}Presenter {
    var presenter: {{ module_info.name }}Presenter { get }
}

class Mixin{{ module_info.name }}Presenter: {{ module_info.name }}Presenter {
    weak var output: {{ module_info.name }}Output?
    {% if custom_parameters.hasDelegate == "yes" and custom_parameters.delegate != "" %}
    weak var delegate: {{ module_info.name }}PresenterDelegate?
    {% endif %}
    func start() {
        output?.configure(title: "{{ module_info.name }}")
        output?.setLabel(text: "{{ module_info.name }} view")
    }

    func setOutput(_ output: {{ module_info.name }}Output) {
        self.output = output
    }

    {% if custom_parameters.hasDelegate == "yes" and custom_parameters.delegate != "" %}
    func closeTapped() {
      delegate?.dismiss(presenter: self)
    }
    {% endif %}
}
